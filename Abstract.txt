The past decades have witnessed the massive growth of Internet. Vast amount of graph data was produced by the boom of social network, e-commerce and online education. 
Systems like Pregel and GraphLab are proposed for distributed graph computing. Graph databases like Neo4j and Titan are developed for management of property graph.

The property graph is a directed, labeled graph with multi-edges. Vertices and edges can associate with any number of properties. Since it can represent graph data in most scenarios, the property graph model has numerous applications in industry. 
However, traditional graph databases encounter significant performance degradation when the graph contains large amount of multi-edges. 
We reveal the cause of this in Titan, an open source distributed graph database, which has attracted wide attention in industry. Furthermore, we propose HybriG, a better distributed architecture based on Titan and HBase for this scenario. 

Titan stores graphs in adjacency list format, where a graph is stored as a collection of vertices with their adjacency lists. Each entry of the adjacency list stores an edge. 
When querying about adjacent vertices, Titan has to look through the entire adjacency list of the source vertex, which hurts the performance when the multi-edge set grows explosively. 
HybriG stores the vertex data and graph structure in Titan, the edge data in HBase, respectively. 
HybriG keeps a concise adjacency list about the graph structure, which helps to gain an order of magnitude improvement in execution of adjacent vertices based queries and batch loading of edge set. 

In this article, we introduce how HybriG implements its storage layer upon Titan and HBase, and how HybriG transforms graph operations into Titan and HBase APIs. 
Besides, HybriG achieves high performance for inserting batch of graph data. 
Furthermore, we introduce the implementation of data consistency between Titan and HBase. 
Extensive experiments have been conducted to show the outstanding performance of HybriG.

